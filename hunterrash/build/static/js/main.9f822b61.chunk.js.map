{"version":3,"sources":["components/Sound/index.jsx","pages/mainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Sound","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","play","audioRef","current","React","createRef","backgroundImage","concat","image","react_default","a","createElement","Card_default","className","style","onClick","src","url","ref","Component","MainPage","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Sound_Sound","theme","createMuiTheme","direction","App","styles","mainPage_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAKqBA,qBAUnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,KAAO,WACLP,EAAKQ,SAASC,QAAQF,QAJtBP,EAAKQ,SAAWE,IAAMC,YAHLX,wEAWjB,IAAMY,EAAkB,CAACA,gBAAe,OAAAC,OAASV,KAAKJ,MAAMe,MAApB,MAExC,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAU,kBAAkBC,MAAOR,EAAiBS,QAASlB,KAAKI,MACtEQ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOK,IAAKnB,KAAKJ,MAAMwB,IAAKC,IAAKrB,KAAKK,oBA1BfE,IAAMe,YCEpBC,mLAEjB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQY,SAAS,SAASC,MAAM,WAC9Bd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KACED,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAYgB,QAAQ,KAAKH,MAAM,WAA/B,gDAMJd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACgB,EAAD,CACEnB,MAAM,mBACNS,IAAI,+EAENR,EAAAC,EAAAC,cAACgB,EAAD,CACEnB,MAAM,qBACNS,IAAI,wFAnBsBE,aCFhCS,EAAQC,yBAAe,CAC3BC,UAAW,QAeEC,mLAVX,OACEtB,EAAAC,EAAAC,cAACqB,EAAA,iBAAD,CAAkBJ,MAAOA,GACvBnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACsB,EAAD,eALQd,aCGEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f822b61.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport './sound.css';\r\n\r\nexport default class Sound extends React.Component {\r\n  static propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.audioRef = React.createRef();\r\n  }\r\n\r\n  play = () => {\r\n    this.audioRef.current.play();\r\n  };  \r\n\r\n  render() {\r\n    const backgroundImage = {backgroundImage: `url(${this.props.image})`};\r\n  \r\n    return (\r\n      <Card className=\"sound-container\" style={backgroundImage} onClick={this.play}>\r\n        <div>\r\n            <audio src={this.props.url} ref={this.audioRef} />\r\n          </div>\r\n      </Card>\r\n    );\r\n  }\r\n}; \r\n","import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport '../App.css';\r\nimport Sound from '../components/Sound';\r\n\r\nexport default class MainPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\" color=\"default\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              האנטרעש\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <div className=\"sounds-container\">    \r\n          <Sound\r\n            image=\"images/shney.jpg\"\r\n            url=\"https://interactive-examples.mdn.mozilla.net/media/examples/t-rex-roar.mp3\"\r\n          />\r\n          <Sound\r\n            image=\"images/TomDvir.jpg\"\r\n            url=\"https://interactive-examples.mdn.mozilla.net/media/examples/t-rex-roar.mp3\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport './App.css';\nimport MainPage from './pages/mainPage';\n\nconst theme = createMuiTheme({\n  direction: 'rtl', // Both here and <body dir=\"rtl\">\n});\n\nclass App extends Component {  \n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className=\"App\">\n          <MainPage />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}